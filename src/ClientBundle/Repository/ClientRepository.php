<?php

namespace ClientBundle\Repository;
use AppBundle\Helper\PaginatorHelper;
use AppBundle\Interfaces\IPagination;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ClientRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClientRepository extends EntityRepository implements IPagination
{
	/**
	 * Get by page method
	 *
	 * 1. Create & pass query to paginate method
	 * 2. Paginate will return a `\Doctrine\ORM\Tools\Pagination\Paginator` object
	 * 3. Return that object to the controller
	 *
	 * @param integer $page The current page (passed from controller)
	 *
	 * @return Paginator
	 */
	public function getByPage($page)
	{
		// TODO: Implement getByPage() method.
		$qb = $this->_em->createQueryBuilder();
		$qb->select('client', 'contact')
			->from('ClientBundle:Client', 'client')
			->leftJoin('client.contact','contact');
		$query = $qb->getQuery();
		$query->setHydrationMode(Query::HYDRATE_ARRAY);
		return $this->paginate($query);

	}

	/**
	 * Paginator Helper
	 *
	 * Pass through a query object, current page & limit
	 * the offset is calculated from the page and limit
	 * returns an `Paginator` instance, which you can call the following on:
	 *
	 *     $paginator->getIterator()->count() # Total fetched (ie: `5` posts)
	 *     $paginator->count() # Count of ALL posts (ie: `20` posts)
	 *     $paginator->getIterator() # ArrayIterator
	 *
	 * @param Query   $dql   DQL Query Object
	 * @param integer $page  Current page (defaults to 1)
	 * @param integer $limit The total number per page (defaults to 25)
	 *
	 * @return \Doctrine\ORM\Tools\Pagination\Paginator | array
	 */
	public function paginate($dql, $page = 1, $limit = 25)
	{
		$pagination = new PaginatorHelper();
		$pagination->setDql($dql);
		$pagination->setLimit($limit);
		$pagination->setPage($page);
		$qb = $this->createQueryBuilder('client');
		$qb->select('count(client.id)');
		$total = $qb->getQuery()->getSingleScalarResult();
		$pagination->setTotal($total);

		return $pagination->advancedPagination();
	}
}
